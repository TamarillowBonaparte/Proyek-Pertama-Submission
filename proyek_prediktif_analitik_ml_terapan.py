# -*- coding: utf-8 -*-
"""Proyek_Prediktif_Analitik_ML_Terapan.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1On82byh7WwHsCGWWmhD13O3hsJEJHFoo

# Pendahuluan

Tema dari analisis ini adalah keuangan dimana hasilnya akan berupa model machine learning yang nanti dapat digunakan untuk memprediksi harga dari Ethereum sebagai Analisis dan Prediksi Harga Ethereum Menggunakan Algoritma KNN, Random Forest, dan AdaBoost

# Data Loading
## Import Library
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn import preprocessing
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_squared_error, r2_score

from sklearn.neighbors import KNeighborsRegressor
from sklearn.ensemble import RandomForestRegressor, AdaBoostRegressor

"""# Data Loading (Unggah Data)"""

# Load dataset Ethereum
df = pd.read_csv('coin_Ethereum.csv')
df.sort_values(by='Date', inplace=True)
df.set_index('Date', inplace=True)
df.head()

"""## Mengunggah data Ethereum
| No | Kolom       | Tipe Data | Penjelasan                                                            |
| -- | ----------- | --------- | --------------------------------------------------------------------- |
| 1  | `SNo`       | `int64`   | Nomor urut data, biasanya hanya sebagai index atau penanda baris      |
| 2  | `Name`      | `object`  | Nama koin kripto, dalam hal ini kemungkinan semua bernilai "Ethereum" |
| 3  | `Symbol`    | `object`  | Simbol dari koin, seperti `ETH`                                       |
| 4  | `High`      | `float64` | Harga tertinggi Ethereum dalam periode (misalnya harian)              |
| 5  | `Low`       | `float64` | Harga terendah Ethereum dalam periode                                 |
| 6  | `Open`      | `float64` | Harga saat pasar dibuka dalam periode itu                             |
| 7  | `Close`     | `float64` | Harga saat pasar ditutup dalam periode itu                            |
| 8  | `Volume`    | `float64` | Total volume perdagangan Ethereum (jumlah transaksi) dalam periode    |
| 9  | `Marketcap` | `float64` | Kapitalisasi pasar Ethereum = harga x total supply                    |


"""

df.info()

# Hapus kolom yang tidak diperlukan
df.drop(['SNo', 'Name', 'Symbol', 'Volume', 'Marketcap'], axis=1, inplace=True)

# Buat fitur rata-rata harga harian
df['OHLC_Average'] = df[['Open', 'High', 'Low', 'Close']].mean(axis=1)

# Buat target prediksi harga 30 hari ke depan
df['Price_After_Month'] = df['Close'].shift(-30)

# Hapus baris dengan nilai kosong
df.dropna(inplace=True)

df.tail()

df.head(20)

df.isnull()

df.isnull().sum()

plt.subplots(figsize=(10,7))
sns.boxplot(data=df).set_title("Ethereum")
plt.show()

"""#Penjelasan Statistik dan Penanganan Outlier
Output statistik memberikan informasi penting terkait sebaran data untuk masing-masing kolom:

*   count: Jumlah total data yang tersedia pada kolom (bukan nilai kosong).

*   mean: Nilai rata-rata dari data pada kolom tersebut.

*   std: Standar deviasi, mengukur seberapa besar penyebaran data terhadap rata-ratanya.

*   min: Nilai terkecil pada kolom.

*   25% (Q1): Kuartil pertama, yaitu nilai di bawah 25% data berada.

*   50% (Median): Kuartil kedua atau nilai tengah dari data.

*   75% (Q3): Kuartil ketiga, yaitu nilai di bawah 75% data berada.

*   max: Nilai maksimum pada kolom.

Berdasarkan nilai Q1 dan Q3, kita dapat menghitung IQR (Interquartile Range) yang digunakan untuk mendeteksi outlier, yaitu nilai-nilai yang berada di luar rentang:
"""

# Deteksi dan hapus outlier menggunakan IQR
Q1 = df.quantile(0.25)
Q3 = df.quantile(0.75)
IQR = Q3 - Q1
df = df[~((df < (Q1 - 1.5 * IQR)) | (df > (Q3 + 1.5 * IQR))).any(axis=1)]

# Pisahkan fitur dan target
X = df.drop('Price_After_Month', axis=1)
y = df['Price_After_Month']

# Standarisasi
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

"""#Membagi data menjadi 80% train dan 20% test"""

# Bagi data menjadi train dan test
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, train_size=0.8, random_state=42)

"""#Analisa Numeric secara Histrogram"""

# Visualisasi histogram
df.hist(bins=50, figsize=(20, 15))
plt.tight_layout()
plt.show()

"""#Korelasi Antar Fitur"""

# Korelasi antar fitur
plt.figure(figsize=(10, 8))
sns.heatmap(df.corr().round(2), annot=True, cmap='coolwarm', linewidths=0.5)
plt.title("Correlation Matrix")
plt.show()

"""##Modeling

#Pembuatan dan Training Model

Inisialisasi tiga model ML (KNN, Radom Forest, AdaBoost)
"""

# Inisialisasi model
knn = KNeighborsRegressor(n_neighbors=10)
rf = RandomForestRegressor(n_estimators=50, max_depth=16, random_state=42)
boosting = AdaBoostRegressor(n_estimators=50, learning_rate=0.05, random_state=42)

# Latih semua model
knn.fit(X_train, y_train)
rf.fit(X_train, y_train)
boosting.fit(X_train, y_train)

# Evaluasi performa
models = {'KNN': knn, 'Random Forest': rf, 'AdaBoost': boosting}
for name, model in models.items():
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    print(f"{name} - MSE: {mse:.2f}, R² Score: {r2:.4f}")

"""Model versi lebih baik"""

from sklearn.ensemble import GradientBoostingRegressor

# KNN
knn_model = KNeighborsRegressor(n_neighbors=5)
knn_model.fit(X_train, y_train)
y_pred_knn = knn_model.predict(X_test)
r2_knn = r2_score(y_test, y_pred_knn)
print(f"KNN - R²: {r2_knn:.4f}")

# Random Forest
rf_model = RandomForestRegressor(n_estimators=200, max_depth=10, random_state=42)
rf_model.fit(X_train, y_train)
y_pred_rf = rf_model.predict(X_test)
r2_rf = r2_score(y_test, y_pred_rf)
print(f"Random Forest - R²: {r2_rf:.4f}")

# Gradient Boosting (lebih baik dari AdaBoost untuk regresi)
gb_model = GradientBoostingRegressor(n_estimators=200, learning_rate=0.1, max_depth=5, random_state=42)
gb_model.fit(X_train, y_train)
y_pred_gb = gb_model.predict(X_test)
r2_gb = r2_score(y_test, y_pred_gb)
print(f"Gradient Boosting - R²: {r2_gb:.4f}")

"""##Evaluation

#Prediksi Modeling 30 hari ke depan
"""

# Gunakan 30 data terakhir untuk prediksi
X_future = X_scaled[-30:]

# Prediksi harga 30 hari ke depan
forecast = knn.predict(X_future)

# Buat tanggal prediksi
forecast_dates = pd.date_range(start=pd.to_datetime(df.index[-1]), periods=31, freq='D')[1:]

# Buat DataFrame hasil prediksi
forecast_df = pd.DataFrame({'Date': forecast_dates, 'Predicted_Price': forecast})
forecast_df.set_index('Date', inplace=True)

# Tampilkan hasil prediksi
print("\nPrediksi Harga Ethereum 30 Hari ke Depan:")
print(forecast_df.head())

# (Opsional) Visualisasi hasil prediksi
forecast_df.plot(figsize=(10, 5), title='Prediksi Harga Ethereum 30 Hari ke Depan')
plt.ylabel("Harga (USD)")
plt.grid(True)
plt.show()

"""#prediksi dengan sample data 100"""

plt.figure(figsize=(10, 5))
plt.plot(y_test.values[:100], label='Actual Prices', marker='o')
plt.plot(y_pred_rf[:100], label='Predicted Prices (RF)', marker='x')
plt.title('Prediksi Harga Ethereum vs Aktual (Sample 100 data)')
plt.xlabel('Index')
plt.ylabel('Harga (Close)')
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()